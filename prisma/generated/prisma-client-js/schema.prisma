generator client {
  provider        = "prisma-client-js"
  output          = "./generated/prisma-client-js"
  previewFeatures = ["fullTextSearch", "interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model EstatusServidores {
  idEstatus   Int          @id @default(autoincrement())
  tipo        Int          @unique(map: "tipo")
  descripcion String?      @db.VarChar(255)
  titulo      String       @unique(map: "titulo") @db.VarChar(255)
  Servidores  Servidores[]
}

model EstatusUsuarios {
  idEstatus   Int        @id @default(autoincrement())
  tipo        Int        @unique(map: "tipo")
  descripcion String?    @db.VarChar(255)
  titulo      String     @unique(map: "titulo") @db.VarChar(255)
  Usuarios    Usuarios[]
}

model PingServidores {
  idPingServidor Int        @id @default(autoincrement())
  idServidor     Int
  times          Float?     @db.Float
  packetLoss     Float?     @db.Float
  min            Float?     @db.Float
  max            Float?     @db.Float
  avg            Float?     @db.Float
  log            String?    @db.Text
  isAlive        Boolean?
  numericHost    String?    @db.VarChar(255)
  fechaPing      DateTime   @db.DateTime(0)
  Servidores     Servidores @relation(fields: [idServidor], references: [idServidor], onDelete: NoAction, onUpdate: NoAction, map: "PingServidores_ibfk_1")

  @@index([idServidor], map: "idServidor")
}

model Servidores {
  publicId           String?              @db.Char(255)
  idServidor         Int                  @id @default(autoincrement())
  estatus            Int
  dominio            String               @db.VarChar(255)
  ip                 String?              @db.VarChar(255)
  fechaCreacion      DateTime             @default(now())
  fechaActualizacion DateTime?            @updatedAt
  EstatusServidores  EstatusServidores    @relation(fields: [estatus], references: [tipo], onDelete: NoAction, onUpdate: NoAction, map: "Servidores_ibfk_1")
  PingServidores     PingServidores[]
  Tasks              Tasks[]
  UsuariosServidores UsuariosServidores[]

  @@index([publicId, idServidor])
}

model Tasks {
  id                 Int           @id @default(autoincrement())
  idTask             String        @unique(map: "idTask") @db.VarChar(500)
  idServidor         Int
  estatus            TasksEstatus? @default(stopped)
  fechaCreacion      DateTime      @default(now())
  fechaActualizacion DateTime?     @updatedAt
  Servidores         Servidores    @relation(fields: [idServidor], references: [idServidor], onDelete: NoAction, onUpdate: NoAction, map: "Tasks_ibfk_1")

  @@index([idServidor], map: "idServidor")
}

model Usuarios {
  publicId           String               @unique(map: "publicId") @db.Char(36)
  idUsuario          Int                  @id @default(autoincrement())
  estatus            Int
  nombre             String               @db.VarChar(50)
  apellido           String               @db.VarChar(50)
  email              String?              @unique(map: "email") @db.VarChar(255)
  password           String               @db.VarChar(255)
  fechaCreacion      DateTime             @default(now())
  fechaActualizacion DateTime?            @updatedAt
  EstatusUsuarios    EstatusUsuarios      @relation(fields: [estatus], references: [tipo], onDelete: NoAction, onUpdate: NoAction, map: "Usuarios_ibfk_1")
  UsuariosServidores UsuariosServidores[]

  @@index([idUsuario, publicId])
}

model UsuariosServidores {
  idUsuario          Int
  usuario            Usuarios   @relation(fields: [idUsuario], references: [idUsuario], onDelete: NoAction, onUpdate: NoAction)
  idServidor         Int
  servidor           Servidores @relation(fields: [idServidor], references: [idServidor], onDelete: NoAction, onUpdate: NoAction)
  nombre             String     @db.VarChar(255)
  descripcion        String?    @db.Text
  fechaCreacion      DateTime   @default(now())
  fechaActualizacion DateTime?  @updatedAt

  @@id([idUsuario, idServidor])
  @@index([idUsuario, idServidor])
}

enum TasksEstatus {
  running
  stopped
  deleted
}
